import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.nio.file.Files
import java.nio.file.Paths
import java.security.MessageDigest
import java.util.concurrent.TimeUnit
import java.util.zip.ZipEntry
import java.util.zip.ZipFile

/**
 * 首字母转大写
 * @param s
 * @return
 */
def toUpperCaseFirstOne(String s) {
    if (s == null) {
        return null
    }
    if (Character.isUpperCase(s.charAt(0))) {
        return s;
    }
    return (new StringBuilder()).append(Character.toUpperCase(s.charAt(0))).append(s.substring(1)).toString();
}

def checkMavenUrl(urlString) {
    if (urlString == null) {
        return false
    }
    try {
        URL url = new URL(urlString)
        HttpURLConnection urlConnection = url.openConnection()
        urlConnection.connect()
        int httpCode = urlConnection.getResponseCode()
        urlConnection.disconnect()
        return httpCode == HttpURLConnection.HTTP_OK
    } catch (Exception e) {
    }
    return false
}

def mavenUrls = [
        "https://android-sdk.is.com/",
        "https://artifact.bytedance.com/repository/pangle",
        "https://artifacts.applovin.com/android",
        "https://artifactory.verizonmedia.com/artifactory/maven",
        "https://dl-maven-android.mintegral.com/repository/mbridge_android_sdk_oversea",
        "https://cboost.jfrog.io/artifactory/chartboost-ads/",
        "https://cboost.jfrog.io/artifactory/chartboost-mediation",
        "https://jfrog.anythinktech.com/artifactory/overseas_sdk"
]
try {
    def sdkMavenUrls = ext.has("mavenUrls") ? ext["mavenUrls"] : mavenUrls
    project.rootProject.allprojects.repositories.each {
        repo ->
            for (String url : sdkMavenUrls) {
                repo.maven { r -> r.url = url }
            }
    }
} catch (Exception e) {
    println("add maven error : " + e)
}

project.afterEvaluate {
    if (project.android.productFlavors.size() > 0) {// 如果有产品风味
        project.android.productFlavors.each { flavor ->
            def productFlavor = toUpperCaseFirstOne(flavor.name)
            def rTask = project.tasks.findByName(String.format("package%sRelease", productFlavor))
            if (rTask != null) {
                rTask.doFirst {
                    encryptAssetsFiles(flavor.name)
                }
            }

            rTask = project.tasks.findByName(String.format("merge%sReleaseAssets", productFlavor))
            if (rTask != null) {
                rTask.doLast {
                    encryptAssetsFiles(flavor.name)
                }
            }

            def packageReleaseBungleTask = project.tasks.findByName(String.format("sign%sReleaseBundle", productFlavor))
            if (packageReleaseBungleTask != null) {
                packageReleaseBungleTask.doLast {
                    removeProguardMap(flavor.name)
                }
            }

            String assembleTaskName = String.format("assemble%sRelease", productFlavor)
            def aTask = project.tasks.findByName(assembleTaskName);
            if (aTask != null) {
                aTask.doLast {
                    openReleaseDir(flavor.name)
                }
            }
            String adFileGenerate = String.format("adFileGenerate%s", productFlavor)
            def adFileGenerateTask = project.tasks.create(adFileGenerate, {
                doLast {
                    adFileGenerateByUser(flavor.name)
                }
            })
            adFileGenerateTask.setGroup("mobsdk")
        }
    } else { // 无产品风味
        def rTask = project.tasks.findByName("packageRelease")
        if (rTask != null) {
            rTask.doFirst {
                encryptAssetsFiles(null)
            }
        }

        rTask = project.tasks.findByName("mergeReleaseAssets")
        if (rTask != null) {
            rTask.doLast {
                encryptAssetsFiles(null)
            }
        }

        def packageReleaseBungleTask = project.tasks.findByName("signReleaseBundle")
        if (packageReleaseBungleTask != null) {
            packageReleaseBungleTask.doLast {
                removeProguardMap(null)
            }
        }

        def aTask = project.tasks.findByName("assembleRelease");
        if (aTask != null) {
            aTask.doLast {
                openReleaseDir(null)
            }
        }

        def adFileGenerateTask = project.tasks.create("adFileGenerate", {
            doLast {
                adFileGenerateByUser(null)
            }
        })
        adFileGenerateTask.setGroup("mobsdk")
    }

    String aab2apkTaskName = String.format("aab2abk")
    def aab2apkTask = project.tasks.create(aab2apkTaskName, {
        doLast {
            transformAab2ApkFlavor()
        }
    })
    aab2apkTask.setGroup("mobsdk")
}

def getAaptFile() {
    def sdkDir = null
    try {
        Properties properties = new Properties()
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
        properties.load(inputStream)
        //读取文件
        sdkDir = properties.getProperty('sdk.dir')
    } catch (Exception e) {
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getAaptFile sdkDir == null, Use ANDROID_SDK_ROOT"
        } else {
            println ":${project.name}:getAaptFile sdkDir is not exist, Use ANDROID_SDK_ROOT"
        }
        sdkDir = System.getenv("ANDROID_SDK_ROOT")
    }
    if (sdkDir == null || !new File(sdkDir).exists()) {
        if (sdkDir == null) {
            println ":${project.name}:getAaptFile sdkDir == null, Use ANDROID_HOME"
        } else {
            println ":${project.name}:getAaptFile sdkDir is not exist, Use ANDROID_HOME"
        }
        sdkDir = System.getenv("ANDROID_HOME")
    }
    println "> Task :${project.name}:getAaptFile sdkDir : " + sdkDir
    if (sdkDir == null) {
        println "> Task :${project.name}:getAaptFile sdkDir == null"
        return null
    }
    if (!new File(sdkDir).exists()) {
        println "> Task :${project.name}:getAaptFile sdkDir is not exist"
        return null
    }
    def exe = ""
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        exe = ".exe"
    }
    def compileSdkVersion = android.compileSdkVersion
    if (compileSdkVersion != null) {
        compileSdkVersion = compileSdkVersion.replaceAll("android-", "");
    }
    def buildToolDir = sdkDir + File.separator + "build-tools"
    def buildToolVersionDir = android.buildToolsVersion
    if (buildToolVersionDir == null) {
        def buildToolDirs = new File(buildToolDir).list(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.startsWith(String.valueOf(compileSdkVersion))
            }
        })
        if (buildToolDirs != null && buildToolDirs.length > 0) {
            buildToolVersionDir = buildToolDirs[0]
        }
    }
    def aaptFile = buildToolDir + File.separator + buildToolVersionDir + File.separator + "aapt" + exe
    println "> Task :${project.name}:getAaptFile aaptFile : " + aaptFile
    return aaptFile
}

def removeProguardMap(flavor) {
    if (ext.has("removeProguardMap") && ext["removeProguardMap"] == true) {
        def flavorName = flavor != null ? flavor : ""
        def outputFile = null
        def outputDir = getBuildDir()
        outputDir = new File(outputDir, "outputs")
        outputDir = new File(outputDir, "bundle")
        if (flavor != null) {
            outputDir = new File(outputDir, flavorName + "Release")
        } else {
            outputDir = new File(outputDir, "release")
        }
        File[] outputFileList = outputDir.listFiles()
        if (outputFileList != null && outputFileList.length > 0) {
            outputFile = outputFileList[0]
        }
        println "> Task :${project.name}:removeProguardMap flavorName : " + flavorName
        println "> Task :${project.name}:removeProguardMap outputDir : " + outputDir
        println "> Task :${project.name}:removeProguardMap outputFile : " + outputFile
        println "> Task :${project.name}:removeProguardMap outputFiles : " + outputDir.list()
        if (outputFile != null && outputFile.exists()) {
            def aaptFile = getAaptFile()
            if (aaptFile != null && new File(aaptFile).exists()) {
                def cmdString = aaptFile + " r " + outputFile + " BUNDLE-METADATA/com.android.tools.build.obfuscation/proguard.map"
                def result = cmdString.execute().text
                println "> Task :${project.name}:removeProguardMap execute remove proguard map file : " + result
            }
        }
    }
}

def getSuffix() {
    return ".cfg"
}

def getSuffixJson() {
    return ".json"
}

def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

/**
 * 打开Release目录
 * @param flavor
 * @return
 */
def openReleaseDir(flavor) {
    if (!isWindows() || !ext.has("openRelease") || ext["openRelease"] != true) {
        return
    }
    try {
        def outputDir = String.format("outputs/apk/%srelease", ((flavor != null && flavor.trim().length() > 0) ? flavor + "/" : ""))
        def outputPath = new File(project.buildDir, outputDir)
        def cmd = "explorer.exe " + outputPath
        cmd.execute()
        println ":${project.name}:openReleaseDir [${outputPath}]"
    } catch (Exception e) {
    }
}

/**
 * 获取applicationId
 * @param flavor
 * @return
 */
def getApplicationId(flavor) {
    if (flavor == null || flavor.trim().length() == 0) {
        return project.android.defaultConfig.applicationId
    }
    def productFlavor = project.android.productFlavors[flavor]
    if (productFlavor.applicationId == null) {
        return project.android.defaultConfig.applicationId
    }
    return productFlavor.applicationId
}

/**
 * 获取assets输出目录
 * @param flavor
 * @return
 */
def getAssetsOutDir(flavor) {
    def productFlavor = toUpperCaseFirstOne(flavor)
    def flavorNoSlash = productFlavor == null ? "" : productFlavor
    def assetsOutDirList = []
    def finalAssetsDir = null
    def outAssetsDir = String.format("intermediates/assets/%s/release", flavorNoSlash)
    assetsOutDirList.add(new File(project.getBuildDir(), outAssetsDir))
    outAssetsDir = String.format("intermediates/merged_assets/%srelease/merge%sReleaseAssets/out", flavorNoSlash, flavorNoSlash)
    assetsOutDirList.add(new File(project.getBuildDir(), outAssetsDir))
    outAssetsDir = String.format("intermediates/merged_assets/%srelease/out", flavorNoSlash, flavorNoSlash)
    assetsOutDirList.add(new File(project.getBuildDir(), outAssetsDir))

    for (dir in assetsOutDirList) {
        if (dir.exists()) {
            finalAssetsDir = dir
            break;
        } else {
            println "[WARNING...] Dir is not exists : [" + dir + "]"
        }
    }
    if (finalAssetsDir != null) {
        System.out.println "[VERBOSE...] Dir is exists : [" + finalAssetsDir + "]"
    }
    return finalAssetsDir
}

/**
 * 生成包名对应的广告配置文件名称
 * @param flavor
 * @return
 */
def adFileGenerateByUser(flavorName) {
    def appId = getApplicationId(flavorName)
    def pkgnameMd5 = Aes.string2MD5(appId)
    def adConfigName = "mob" + pkgnameMd5.substring(0, 8) + getSuffix()
    println "generateAdFileName : " + adConfigName
    println "generateOriginName : " + "app_mob_data.cfg"
}

/**
 * 获取广告配置文件名称
 * @param assetsDir
 * @param appId
 * @return
 */
def getAdConfigFile(assetsDir, appId) {
    def pkgnameMd5 = Aes.string2MD5(appId)
    def adConfigName = "mob" + pkgnameMd5.substring(0, 8)
    def adDefaultName = "app_mob_data"
    def adConfigFile1 = new File(assetsDir, adConfigName + getSuffix())
    def adDefaultFile1 = new File(assetsDir, adDefaultName + getSuffix())
    if (adConfigFile1.exists()) {
        return adConfigFile1.getAbsolutePath()
    }
    if (adDefaultFile1.exists()) {
        return adDefaultFile1.getAbsolutePath()
    }
    def adConfigFile2 = new File(assetsDir, adConfigName + getSuffixJson())
    def adDefaultFile2 = new File(assetsDir, adDefaultName + getSuffixJson())
    if (adConfigFile2.exists()) {
        return adConfigFile2.getAbsolutePath()
    }
    if (adDefaultFile2.exists()) {
        return adDefaultFile2.getAbsolutePath()
    }
    return null
}

/**
 * 获取待加密的文件树
 * @param assetDir
 * @return
 */
def getEncryptFileTree(assetDir) {
    def output = ext != null && ext.has("encryptFiles") ? ext.encryptFiles : null
    if (output != null) {
        FileTree mainTree = fileTree(dir: assetDir)
        output.each {
            out ->
                mainTree.include out
        }
        return mainTree
    }
    return null
}

/**
 * 获取签名信息
 * @param flavor
 * @return
 */
def getSignConfig(flavor) {
    def signConfig = null
    if (flavor == null) {
        try {
            signConfig = project.android.buildTypes.release.signingConfig
        } catch (Exception e) {
        }
    } else {
        try {
            signConfig = project.android.productFlavors[flavor].signingConfig
        } catch (Exception e) {
        }
    }
    if (signConfig == null) {
        try {
            signConfig = project.android.buildTypes.release.signingConfig
        } catch (Exception e) {
        }
    }
    return signConfig
}

/**
 * 生成签名的md5文件，一边验证是否被重打包
 * @param assetDir
 */
def generateSignMd5(flavor, assetDir) {
    def signConfig = getSignConfig(flavor)
    def signMd5 = null
    if (signConfig != null && signConfig.hasProperty("storeFile") && signConfig.hasProperty("storePassword")) {
        def cmdString = String.format("keytool -v -list -keystore %s -storepass %s", signConfig.storeFile, signConfig.storePassword)
        def result = cmdString.execute().text.trim()
        BufferedReader br = new BufferedReader(new StringReader(result))
        try {
            while ((line = br.readLine()) != null) {
                if (line.trim().startsWith("MD5:") || line.trim().startsWith("md5:")) {
                    signMd5 = line.trim().substring("MD5:".length()).trim()
                    break
                }
            }
        } catch (Exception e) {
        }
    }
    if (signMd5 != null && signMd5.trim().length() > 0) {
        signMd5 = signMd5.replaceAll(":", "")
        signMd5 = signMd5.toLowerCase()
    }
    println ":${project.name}:signMd5 [${signMd5}]"
    return null
}

/**
 * 加密asset文件
 * @param flavor
 * @return
 */
def encryptAssetsFiles(flavor) {
    def secret = ext != null && ext.has("secret") ? ext["secret"] : "123456789"
    def appId = getApplicationId(flavor)
    def assetDir = getAssetsOutDir(flavor)
    if (assetDir == null) {
        System.err.println("[ERROR...] Can not find the output Asset Dir");
        return;
    }
    // def signFile = generateSignMd5(flavor, assetDir)
    def adFilePath = getAdConfigFile(assetDir, appId)
    def mainTree = getEncryptFileTree(assetDir)
    println ":${project.name}:encryptAdFile    [${adFilePath}]"
    if (adFilePath != null) {
        if (Aes.isJson(adFilePath)) {
            try {
                Aes.encryptFile(adFilePath, secret)
                println "[VERBOSE...] [" + new File(adFilePath).getName() + "] encrypt successfully"
            } catch (Exception e) {
                e.printStackTrace()
            }
        } else {
            println "[VERBOSE...] [" + new File(adFilePath).getName() + "] has encrypted previously"
        }
    } else {
        println "[VERBOSE...] can not find ad file ..."
    }
    if (mainTree != null) {
        mainTree.each { File file ->
            println ":${project.name}:encryptExtraFile [${file}]"
            def filePath = file.getAbsolutePath()
            if (Aes.isJson(filePath)) {
                try {
                    Aes.encryptFile(filePath, secret)
                    println "[VERBOSE...] [" + new File(filePath).getName() + "] encrypt successfully"
                } catch (Exception e) {
                    e.printStackTrace()
                }
            } else {
                println "[VERBOSE...] [" + new File(filePath).getName() + "] has encrypted previously"
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
afterEvaluate {
    try {
        def taskName = getGradle().getStartParameter().getTaskRequests()[0]["args"][0].toString()
        if (taskName != null && taskName.toLowerCase(Locale.ENGLISH).contains("bundle")) {
            def index = taskName.lastIndexOf(":")
            if (index > -1) {
                taskName = taskName.substring(index + 1)
            }
            def aTask = project.tasks.findByName(taskName)
            if (aTask != null) {
                aTask.doLast {
                    if (isAAB2ApkAllow()) {
                        transformAab2ApkFlavor()
                    } else {
                        println "> Task :${project.name}:transformAab2Apk aab2apk is not set"
                    }
                    openBundleReleaseDir(taskName)
                }
            }
        }
    } catch (Exception e) {
    }
}


def openBundleReleaseDir(String taskName) {
    if (!ext.has("openRelease") || ext["openRelease"] != true) {
        return
    }
    if (isContainBundleRelease(taskName)) {
        try {
            def openCmd = org.gradle.internal.os.OperatingSystem.current().isWindows() ? "explorer.exe" : "open"
            def outputPath = new File(project.buildDir, "outputs/bundle")
            def outputReleasePath = new File(outputPath, "release")
            if (outputReleasePath.exists()) {
                outputPath = outputReleasePath
            }
            def cmd = openCmd + " " + outputPath
            cmd.execute()
            println ""
            println "> Task :${project.name}:openBundleDir [${outputPath}]"
        } catch (Exception e) {
        }
    }
}

def isContainBundleRelease(String taskName) {
    if (taskName != null && taskName.contains("Release")) {
        return true;
    }
    return false;
}

def isAAB2ApkAllow() {
    def aab2apk = true
    if (ext.has("aab2apk")) {
        aab2apk = ext.get("aab2apk")
    }
    return aab2apk
}

def getChannelList() {
    def channel_list = null
    if (ext.has("channels")) {
        channel_list = ext.get("channels")
    }
    return channel_list
}

def getChannelFileName() {
    def channelFileName = null
    if (ext.has("channelFileName")) {
        channelFileName = ext.get("channelFileName")
    }
    return channelFileName
}

def transformAab2ApkFlavor() {
    println ""
    println "> Task :${project.name}:transformAab2Apk"
    if (project.android.productFlavors.size() > 0) {// 如果有产品风味
        project.android.productFlavors.each { flavor ->
            def productFlavor = toUpperCaseFirstOne(flavor.name)
            def baseName = getArchivesBaseName()
            def aabOutputAabFileName = baseName + "-" + flavor.name + "-release.aab"
            transformAab2ApkLocked(productFlavor, aabOutputAabFileName)
        }
    } else {
        def baseName = getArchivesBaseName()
        def aabOutputAabFileName = baseName + "-release.aab"
        transformAab2ApkLocked(null, aabOutputAabFileName)
    }
}

def transformAab2ApkLocked(flavorName, aabOutputFileName) {
    println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] aabOutputFileName : " + aabOutputFileName
    if (aabOutputFileName != null) {
        aabOutputFileName = aabOutputFileName.replace(".apk", ".aab")
    }

    def obfuscatedBundleFileName = null
    try {
        obfuscatedBundleFileName = aabResGuard.obfuscatedBundleFileName
    } catch (Exception e) {
    }

    def finalBundleName = null
    if (obfuscatedBundleFileName != null && !obfuscatedBundleFileName.trim().isEmpty()) {
        finalBundleName = obfuscatedBundleFileName
    } else {
        finalBundleName = aabOutputFileName
    }
    def outputAabFile = null
    def buildDir = getBuildDir()
    if (flavorName != null && !flavorName.trim().isEmpty()) {
        outputAabFile = new File(buildDir, "outputs" + File.separatorChar + "bundle" + File.separatorChar + flavorName + "Release" + File.separatorChar + finalBundleName)
    } else {
        outputAabFile = new File(buildDir, "outputs" + File.separatorChar + "bundle" + File.separatorChar + "release" + File.separatorChar + finalBundleName)
    }
    def finalBundleFile = outputAabFile
    println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] finalBundleFile : " + finalBundleFile
    if (finalBundleFile == null || !finalBundleFile.exists()) {
        System.err.println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] finalBundleFile is not exist"
        return
    }
    def signConfig = getAab2ApkSignConfig(flavorName)
    println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] signConfig : ${signConfig}"
    if (signConfig == null) {
        System.err.println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] signConfig is Null"
        return
    }
    if (!signConfig.containsKey("storeFile")
            || !signConfig.containsKey("storePassword")
            || !signConfig.containsKey("keyAlias")
            || !signConfig.containsKey("keyPassword")) {
        System.err.println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] signConfig is not completion"
        return
    }
    def bundleFileName = "bundletool-1.16.0.jar"
    def bundleToolDir = new File(gradle.gradleUserHomeDir, "bundletool")
    bundleToolDir.mkdirs()
    def bundleToolPath = new File(bundleToolDir, bundleFileName).getAbsolutePath()
    def bundleToolPathCompleteFile = new File(bundleToolDir, bundleFileName + ".lock").getAbsolutePath()
    println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] bundleToolPath : " + bundleToolPath
    if (!new File(bundleToolPath).exists() || !new File(bundleToolPathCompleteFile).exists()) {
        println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] Downloading " + bundleFileName
        def bundleToolUrl = "https://nexus.webeyemobi.com/repository/maven-public/com/android/tools/bundletool/1.16.0/" + bundleFileName
        try {
            downloadFile(bundleToolUrl, bundleToolPath, "> Task :${project.name}:transformAab2Apk [" + flavorName + "] " + bundleFileName)
            new File(bundleToolPathCompleteFile).createNewFile()
        } catch (Exception e) {
            println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] download file error"
        }
    }

    if (bundleToolPath == null || !new File(bundleToolPath).exists()) {
        System.err.println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] bundle tool is null"
        return
    }
    executeTransformAab2Apk(signConfig, finalBundleFile, bundleToolPath, flavorName)

    def channelList = getChannelList()
    if (channelList != null && !channelList.isEmpty()) {
        channelList.each {
            def channel = it
            def fileDir = finalBundleFile.getParentFile()
            def finalBundleFileName = finalBundleFile.getName()
            def baseName = finalBundleFileName.substring(0, finalBundleFileName.lastIndexOf("."))
            def channelFileName = baseName + "_" + channel + ".aab"
            def channelAabFile = new File(fileDir, channelFileName)
            println ""
            println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] Generate Channel Apk : [" + channel + "]"
            copyFile(finalBundleFile.getAbsolutePath(), channelAabFile.getAbsolutePath())
            appendChannelToAabFile(channelAabFile.getAbsolutePath(), channel, fileDir, flavorName, getChannelFileName())
            executeTransformAab2Apk(signConfig, channelAabFile, bundleToolPath, flavorName)
            channelAabFile.delete()
        }
    }
}

def executeTransformAab2Apk(signConfig, finalBundleFile, bundleToolPath, flavorName) {
    def storeFile = signConfig.storeFile
    def storePassword = signConfig.storePassword
    def keyAlias = signConfig.keyAlias
    def keyPassword = signConfig.keyPassword
    def finalBundleFileName = finalBundleFile.getName()
    def finalApkFileName = finalBundleFileName.substring(0, finalBundleFileName.lastIndexOf(".aab"))
    def finalApksFile = new File(finalBundleFile.getParent(), finalApkFileName + ".apks")
    def finalApkFile = new File(finalBundleFile.getParent(), finalApkFileName + ".apk")
    def cmdList = ["java", "-jar", bundleToolPath,
                   "build-apks",
                   "--bundle=" + finalBundleFile,
                   "--output=" + finalApksFile,
                   "--overwrite", "--verbose",
                   "--ks=" + storeFile,
                   "--ks-pass=pass:" + storePassword,
                   "--ks-key-alias=" + keyAlias,
                   "--key-pass=pass:" + keyPassword,
                   "--mode=universal"]
    def cmdString = cmdList.join(" ")
    println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] Command : [" + optimizeCommand(cmdString) + "]"
    try {
        def process = cmdString.execute()
        def pid = process.waitFor()
        if (pid == 0) {
            println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] Result : [" + process.text.trim() + "]"
        } else {
            println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] Error  : [" + process.err.text + "]"
        }
        if (finalApksFile != null && finalApksFile.exists()) {
            extractFileFromZip(finalApksFile, "universal.apk", finalApkFile)
            println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] finalApkFile : [" + finalApkFile + "]"
            if (finalApkFile.exists()) {
                finalApksFile.delete()
            }
        } else {
            println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] transform aab to apk failed"
        }
    } catch (Exception e) {
        println "> Task :${project.name}:transformAab2Apk [" + flavorName + "] error : " + e
    }
}

def copyFile(srcFile, dstFile) {
    File channelApkFile = new File(dstFile)
    if (channelApkFile.exists()) {
        channelApkFile.delete()
    }
    Files.copy(Paths.get(srcFile), Paths.get(dstFile))
}

def appendChannelToAabFile(aabFilePath, channel, releaseDir, flavorName, channelFileName) {
    println "> Task :${project.name}:appendChannelsFile [" + flavorName + "][" + channel + "] >>>>>>>>> Append Channels File Start <<<<<<<<<"
    println "> Task :${project.name}:appendChannelsFile [" + flavorName + "][" + channel + "] BaseApk [" + aabFilePath + "]"

    // 创建渠道文件
    File tempBase = new File(releaseDir, "base")
    tempBase.mkdirs()
    File tempAssets = new File(tempBase, "assets")
    tempAssets.mkdirs()
    if (channelFileName == null) {
        channelFileName = "ss_channel_cfg"
    }
    File channelFile = new File(tempAssets, channelFileName)

    // 给渠道文件写入渠道号
    FileWriter writer = new FileWriter(channelFile, false)
    writer.write(channel)
    writer.close()

    // 添加渠道文件到assets目录
    def cwd = new File(aabFilePath).getParent()
    appendFilesIntoApk(cwd, aabFilePath, ["base/assets/" + channelFileName])
    // 删除临时渠道文件
    channelFile.delete()
    tempAssets.delete()
    tempBase.delete()
    println "> Task :${project.name}:appendChannelsFile [" + flavorName + "][" + channel + "] >>>>>>>>> Append Channels File Complete <<<<<<<<<\n"
}

def getAppendCmdListByAapt(packageFile, aaptFile, fileList) {
    def cmd = []
    cmd.add(aaptFile)
    cmd.add("a")
    cmd.add("-v")
    cmd.add(packageFile)
    fileList.each {
        cmd.add(it)
    }
    return cmd
}

def appendFilesIntoApk(workDir, packageFile, fileList) {
    def aaptFile = getAaptFile()
    def cmd = getAppendCmdListByAapt(packageFile, aaptFile, fileList)
    if (cmd == null || cmd.isEmpty()) {
        println "> Task :${project.name}:appendFilesIntoApk Error [cmd is empty]"
        return
    }
    def cmdString = cmd.join(" ")
    println "> Task :${project.name}:appendFilesIntoApk Command [" + optimizeCommand(cmdString) + "]"
    try {
        Process p = cmdString.execute(null, new File(workDir))
        p.waitFor(20, TimeUnit.SECONDS)
        p.closeStreams()
        p.destroy();
    } catch (Exception e) {
        e.printStackTrace()
    }
}

def downloadFile(srcUrl, outputFilePath, progressText) {
    if (new File(outputFilePath).exists()) {
        new File(outputFilePath).delete()
    }
    def url = new URL(srcUrl)
    def connection = url.openConnection()
    def fileSize = connection.contentLength
    def inputStream = connection.inputStream
    def outputStream = new FileOutputStream(outputFilePath)
    byte[] buffer = new byte[4096]
    int bytesRead
    long totalBytesRead = 0
    try {
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead)
            totalBytesRead += bytesRead
            if (fileSize > 0) {
                def progress = (totalBytesRead * 100 / fileSize) as int
                System.out.print("\r\033[K" + progressText + " Downloading... [$totalBytesRead/$fileSize] $progress% complete")
            } else {
                System.out.print("\r\033[K" + progressText + " Downloading... $totalBytesRead complete")
            }
            System.out.flush()
        }
    } catch (Exception e) {
        throw e
    } finally {
        try {
            inputStream.close()
            outputStream.close()
        } catch (Exception error) {
        }
    }
    println("\n" + progressText + " Download complete!")
}

def extractFileFromZip(packageFile, filePath, outputFile) {
    def extraSuccess = false
    try {
        ZipFile zipFile = new ZipFile(packageFile)
        ZipEntry zipEntry = zipFile.getEntry(filePath)
        if (zipEntry != null) {
            InputStream is = zipFile.getInputStream(zipEntry)
            byte[] buf = new byte[1024]
            def length = 0
            FileOutputStream fos = new FileOutputStream(outputFile)
            while ((length = is.read(buf)) > 0) {
                fos.write(buf, 0, length)
            }
            is.close()
            fos.close()
        }
        zipFile.close()
        extraSuccess = true
    } catch (Exception e) {
        extraSuccess = false
        e.printStackTrace()
    }
    return extraSuccess
}

def optimizeCommand(cmdString, delimiter = " ") {
    if (android.defaultConfig.ext.has("debug") && android.defaultConfig.ext["debug"]) {
        if (" ".equals(delimiter)) {
            return cmdString
        }
        return cmdString.replaceAll(",", " ")
    }
    try {
        List<String> list = Arrays.asList(cmdString.split(delimiter))
        List<String> list2 = new ArrayList<String>(list.size())
        for (int index = 0; index < list.size(); index++) {
            String s = list.get(index)
            File file = new File(s)
            if (file.exists()) {
                list2.add(file.getName())
            } else {
                list2.add(s)
            }
        }
        return list2.join(" ")
    } catch (Exception e) {
        e.printStackTrace()
    }
    return cmdString
}

/**
 * 获取签名信息
 * @param flavor
 * @return
 */
def getAab2ApkSignConfig(flavor) {
    if (ext.has("signingConfig")) {
        signingConfig = ext.get("signingConfig")
        if (signingConfig != null
                && signingConfig.containsKey("keyAlias")
                && signingConfig.containsKey("keyPassword")
                && signingConfig.containsKey("storeFile")
                && signingConfig.containsKey("storePassword")) {
            return signingConfig
        }
    }
    def signConfig = getReleaseSignConfig(flavor)
    if (signConfig != null && signConfig.hasProperty("storeFile")
            && signConfig.hasProperty("storePassword")
            && signConfig.hasProperty("keyAlias")
            && signConfig.hasProperty("keyPassword")) {
        return [
                storeFile    : signConfig.storeFile,
                storePassword: signConfig.storePassword,
                keyAlias     : signConfig.keyAlias,
                keyPassword  : signConfig.keyPassword
        ]
    }
    return null
}

def getReleaseSignConfig(flavor) {
    def signConfig = null
    if (flavor == null) {
        try {
            signConfig = project.android.buildTypes.release.signingConfig
        } catch (Exception e) {
        }
    } else {
        try {
            signConfig = project.android.productFlavors[flavor].signingConfig
        } catch (Exception e) {
        }
    }
    if (signConfig == null) {
        try {
            signConfig = project.android.buildTypes.release.signingConfig
        } catch (Exception e) {
        }
    }
    return signConfig
}
//////////////////////////////////////////////////////////////////////////////////////////

class Aes {
    private static void appendHex(StringBuffer paramStringBuffer, byte paramByte) {
        paramStringBuffer.append(
                "0123456789ABCDEF".charAt(0xF & paramByte >> 4)).append(
                "0123456789ABCDEF".charAt(paramByte & 0xF));
    }

    static String decrypt(String key, String content) {
        try {
            String str = new String(decrypt(getRawKey(key.getBytes()),
                    toByte(content)));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt error: " + localException);
        }
        return null;
    }

    static byte[] decrypt(byte[] key,
                          byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(2, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static String decryptRaw(String seed, byte[] content) {
        try {
            String str = new String(
                    decrypt(getRawKey(seed.getBytes()), content));
            return str;
        } catch (Exception localException) {
            System.out.println("decrypt raw error: " + localException);
        }
        return null;
    }

    static String encryptPublic(String key, String content) {
        try {
            byte[] result = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return toHex(result);
        } catch (Exception localException) {
        }
        return null;
    }

    private static byte[] encrypt(byte[] key,
                                  byte[] content) throws Exception {
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(key,
                "AES");
        Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        localCipher.init(1, localSecretKeySpec, new IvParameterSpec(
                new byte[localCipher.getBlockSize()]));
        return localCipher.doFinal(content);
    }

    static byte[] encryptRaw(String key, String content) {
        try {
            byte[] arrayOfByte = encrypt(getRawKey(key.getBytes()),
                    content.getBytes());
            return arrayOfByte;
        } catch (Exception localException) {
            System.out.println("encrypt raw error: " + localException);
        }
        return null;
    }

    static String fromHex(String content) {
        return new String(toByte(content));
    }

    private static byte[] getRawKey(byte[] key) throws Exception {
        byte[] arrayOfByte = new byte[16];
        if (key == null)
            throw new IllegalArgumentException("seed == null");
        if (key.length == 0)
            throw new IllegalArgumentException("seed.length == 0");
        if (key.length < 16) {
            int i = 0;
            while (i < arrayOfByte.length) {
                if (i < key.length) {
                    arrayOfByte[i] = key[i];
                } else {
                    arrayOfByte[i] = 0;
                }
                i++;
            }
        }
        return arrayOfByte;
    }

    static byte[] toByte(String content) {
        int i = content.length() / 2;
        byte[] arrayOfByte = new byte[i];
        for (int j = 0; j < i; j++)
            arrayOfByte[j] = Integer.valueOf(
                    content.substring(j * 2, 2 + j * 2), 16).byteValue();
        return arrayOfByte;
    }

    static String toHex(String content) {
        return toHex(content.getBytes());
    }

    static String toHex(byte[] content) {
        if (content == null)
            return "";
        StringBuffer localStringBuffer = new StringBuffer(
                2 * content.length);
        for (int i = 0; i < content.length; i++)
            appendHex(localStringBuffer, content[i]);
        return localStringBuffer.toString();
    }

    private static String readFromFile(File f) {
        if (!f.exists()) {
            return null;
        }
        StringBuilder builder = new StringBuilder();
        try {
            byte[] buf = new byte[4096];
            int read = 0;
            FileInputStream fis = new FileInputStream(f);
            while ((read = fis.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            fis.close();
            return builder.toString();
        } catch (Exception e) {
        }
        return null;
    }

    private static void writeToFile(File f, String out) {
        try {
            if (f.exists()) {
                f.delete();
            }
            f.createNewFile();
            FileOutputStream fos = new FileOutputStream(f);
            fos.write(out.getBytes());
            fos.close();
        } catch (Exception e) {
        }
    }

    private static void usage() {
        String usage = "java -jar aes.jar <-k rawkey> [-e/-d] [-i input] [-o output] [-s str]";
        System.out.println(usage);
    }

    private static boolean isEmpty(String str) {
        if (str == null || str.trim().equals("")) {
            return true;
        }
        return false;
    }

    static String readFromStream(InputStream is) {
        if (is == null) {
            return null;
        }
        try {
            StringBuilder builder = new StringBuilder();
            int read = 0;
            byte[] buf = new byte[1024];
            while ((read = is.read(buf)) > 0) {
                builder.append(new String(buf, 0, read));
            }
            is.close();
            return builder.toString();
        } catch (Exception e) {
            e.printStackTrace()
        }
        return null;
    }

    static String readLocal(String filePath) {
        try {
            InputStream is = new FileInputStream(filePath);
            return readFromStream(is);
        } catch (Exception e) {
        }
        return null;
    }

    static boolean isJson(String file) {
        try {
            String s = readLocal(file)
            if (s != null) {
                s = s.trim()
            }
            if (s.startsWith("[") || s.startsWith("{")) {
                return true
            }
        } catch (Exception e) {
            e.printStackTrace()
        }
        return false
    }

    static void encryptFile(String originFile, String secret) {
        try {
            String encrypt = encryptPublic(secret, readFromFile(new File(originFile))); //加密
            writeToFile(new File(originFile), encrypt);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static String byte2MD5(byte[] byteArray) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance("MD5");
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
        byte[] md5Bytes = md5.digest(byteArray);
        StringBuffer hexValue = new StringBuffer();
        for (int i = 0; i < md5Bytes.length; i++) {
            int val = md5Bytes[i] & 0xff;
            if (val < 16) {
                hexValue.append("0");
            }
            hexValue.append(Integer.toHexString(val));
        }
        return hexValue.toString();
    }

    static String string2MD5(String source) {
        return string2MD5(source, "utf-8");
    }

    static String string2MD5(String source, String encode) {
        try {
            return byte2MD5(source.getBytes(encode));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }
}